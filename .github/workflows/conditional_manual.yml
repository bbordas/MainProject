# This is a basic workflow to help you get started with Actions

name: Conditional Manual

on:
  push:
    branches:
      - '**'
        
  workflow_dispatch:
    inputs:
      projectName:
        description: 'Project name'     
        required: true
        default: 'project1'
      environment:
        description: 'environment'     
        required: true
        default: 'dev'
        
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      
    - name: Get Git Version
      uses: docker://gittools/gitversion:5.0.2-beta1-27-linux-centos-7-netcoreapp2.2
      with:
        args: /github/workspace /nofetch /exec /bin/sh /execargs "-c \"echo $GitVersion_ShortSha > /github/workspace/version.txt\""
        
    - uses: dorny/paths-filter@v2
      if: github.event_name != 'workflow_dispatch'
      id: filter
      with:
        filters: |
          shared: &shared
            - package.json
            - tsconfig.json
          project1:
            - *shared
            - 'projects/project1/**'
          project2:
            - *shared
            - 'projects/project2/**'
          project3:
            - *shared
            - 'projects/project3/**'
      
    - name: Set version and environment
      run: |
        echo "ENV=dev" >> $GITHUB_ENV
        echo "VERSION=$(cat /home/runner/work/MainProject/MainProject/version.txt)" >> $GITHUB_ENV
        echo "PROJECT_NAME=null" >> $GITHUB_ENV
        
    - name: Set PROJECT_NAME for project1
      if: steps.filter.outputs.project1 == 'true'
      run: echo "PROJECT_NAME=project1" >> $GITHUB_ENV
        
    - name: Set PROJECT_NAME for project2
      if: steps.filter.outputs.project2 == 'true'
      run: echo "PROJECT_NAME=project2" >> $GITHUB_ENV
        
    - name: Set PROJECT_NAME for project3
      if: steps.filter.outputs.project3 == 'true'
      run: echo "PROJECT_NAME=project3" >> $GITHUB_ENV
        
    - name: Set PROJECT_NAME from input
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "PROJECT_NAME=${{ github.event.inputs.projectName }}" >> $GITHUB_ENV
        echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        
    - name: print out variables
      id: check
      run: echo ::set-output name=project::$PROJECT_NAME

    - name: Login to DockerHub
      if: steps.check.outputs.project != 'null'
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASS }}
        
    - name: Build image
      if: steps.check.outputs.project != 'null'
      run: | 
        docker build --no-cache --file Dockerfile \
        --tag bbordas/mainproject_$PROJECT_NAME:latest \
        --tag bbordas/mainproject_$PROJECT_NAME:$VERSION \
        --build-arg PROJECT_NAME=$PROJECT_NAME .
 
    - name: Push to Docker Hub
      if: steps.check.outputs.project != 'null'
      run: | 
        docker push bbordas/mainproject_$PROJECT_NAME:latest
        docker push bbordas/mainproject_$PROJECT_NAME:$VERSION
        
        
    - id: tag master
      run: |
        sh 'export RELEASE_TAG=`git log -1 --format=%h` && git tag -a ${RELEASE_TAG}-stable -m \"Release of MainProject at ${RELEASE_TAG}\'
        sh 'git push origin --tags'

          
